#!/usr/bin/env node

const program = require('commander');
const fs = require('fs');
const { version } = require('../package.json');
const ruleFinder = require('../index');

// Set up Commander
program.version(version);
program.description('cli for getting eslint rules');
program.option('-c, --current [file]', 'get current rules');
program.option('-u, --unused [file]', 'get unused rules');
program.option('-s, --save <file>', 'save output in markdown file');
program.option('-i, --include', 'include deprecated rules');
program.parse(process.argv);

const stdout = message => process.stdout.write(message);
const stderr = message => process.stderr.write(message);

const { current, include } = program;

// check options passed
if (current) {
  const config = new ruleFinder.LoadConfig(current);

  stdout('Current Defined Rules\n');

  config.currentRules.forEach((value, key) => {
    if (value.meta.deprecated && include) {
      stdout(`${key} (deprecated)\n`);
    } else if (!value.meta.deprecated) {
      stdout(`${key}\n`);
    }
  });

  stdout('\n');
} else if (program.unused && program.save) {
  let unused = ruleFinder.findUnused(program.unused, program.include);
  unused = ruleFinder.sortRules(unused);

  let text = '## Unused Rules';

  let category = '';

  unused.forEach((rule) => {
    if (category !== rule.category) {
      category = rule.category;

      text += `\n\n${category}\n\n`;
    }

    text += `- [ ] ${rule.name}\n`;
  });

  fs.writeFileSync(program.save, text, { encoding: 'utf-8', flag: 'w' });
} else if (program.unused) {
  const unused = ruleFinder.findUnused(program.unused, program.include);
  const numOfUnused = Array.from(unused).length;

  if (numOfUnused) {
    unused.forEach((value, key) => stderr(`${key}\n`));
    stderr(`\n expected ${numOfUnused} rules to be defined \n`);
    process.exit(1);
  } else {
    stdout('No unused rules\n\n');
  }
} else {
  program.help();
}
