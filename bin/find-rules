#!/usr/bin/env node

/* eslint-disable no-console */
const program = require('commander')
const fs = require('fs')
const { version } = require('../package.json')

const {
  LoadConfig,
  findUnused,
  sortRules,
  saveCurrentRules
} = require('../index')

const getCategory = require('../utils/get-category')

// Set up Commander
program.version(version)
program.description('cli for getting eslint rules')
program.option('-c, --current [file]', 'get current rules, (include deprecated is default)')
program.option('-u, --unused [file]', 'get unused rules')
program.option('-s, --save <file>', 'save output in markdown file')
program.option('-i, --include', 'include deprecated rules')
program.parse(process.argv)

const {
  current,
  include,
  unused,
  save
} = program

// check options passed
if (current) {
  const { currentRules, rules } = new LoadConfig(current !== true ? current : undefined)

  if (save) {
    saveCurrentRules(save, currentRules)
  } else {
    console.log('Current Rules\n')

    try {
      currentRules.forEach((value, rule) => {
        const definition = rules.get(rule)

        if (!definition) {
          throw new Error(`${rule} Doesn't exist`)
        } else if (definition.meta && definition.meta.deprecated) {
          process.emitWarning(`${rule} is deprecated`)
        }

        return console.log(rule)
      })
    } catch (error) {
      console.error(`ERROR: ${error.message}`)
      process.exit(10)
    }

    console.log('')
  }
} else if (unused && save) {
  const config = new LoadConfig(unused !== true ? unused : undefined)
  const unusedRules = findUnused(config, program.include)
  const sortedRules = sortRules(unusedRules)

  let text = '## Unused Rules'

  let category = ''

  sortedRules.forEach((value, key) => {
    const newCategory = getCategory([key, value])

    if (category !== newCategory) {
      category = newCategory

      text += `\n\n${category}\n\n`
    }

    text += `- [ ] ${key}\n`
  })

  fs.writeFileSync(save, text, { encoding: 'utf-8', flag: 'w' })
} else if (unused && !include) {
  const config = new LoadConfig(unused !== true ? unused : undefined)
  const unusedRules = findUnused(config, include)

  if (unusedRules.size) {
    unusedRules.forEach((value, key) => {
      let description = ''

      // eslint-plugin-import does not define a docs
      if (value.meta && value.meta.docs && value.meta.docs.description) {
        description = value.meta.docs.description
      }

      console.error(`Not Defined: ${key}(${description})`)
    })

    console.error(`\n${unusedRules.size} rules not defined\n`)
    process.exit(1)
  }
} else {
  program.help()
}
