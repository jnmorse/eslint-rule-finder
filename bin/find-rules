#!/usr/bin/env node

const program = require('commander');
const fs = require('fs');
const { version, name: projectName } = require('../package.json');
const ruleFinder = require('../index');
const getCategory = require('../utils/get-category');

// Set up Commander
program.version(version);
program.description('cli for getting eslint rules');
program.option('-c, --current [file]', 'get current rules');
program.option('-u, --unused [file]', 'get unused rules');
program.option('-s, --save [file]', 'save output in markdown file');
program.option('-i, --include', 'include deprecated rules');
program.parse(process.argv);

const stdout = message => process.stdout.write(message);
const stderr = message => process.stderr.write(message);

const {
  current,
  include,
  unused,
  save
} = program;

const { currentRules } = new ruleFinder.LoadConfig(current);

if (current && save) {
  const sortedRules = ruleFinder.sortRules(currentRules);
  let category = '';
  let text = `# ${projectName}: Current Rules`;

  sortedRules.forEach((value, key) => {
    const newCategory = getCategory([key, value]);

    if (category !== newCategory) {
      category = newCategory;

      text += `\n\n${category}\n\n`;
    }

    text += `- ${key}\n`;
  });

  fs.writeFileSync(save, text, { encoding: 'utf-8', flag: 'w' });
} else if (current) {
  stdout('Current Defined Rules\n');

  currentRules.forEach((value, key) => {
    if (value.meta.deprecated && include) {
      stdout(`${key} (deprecated)\n`);
    } else if (!value.meta.deprecated) {
      stdout(`${key}\n`);
    }
  });

  stdout('\n');
} else if (unused && save) {
  const unusedRules = ruleFinder.findUnused(program.unused, program.include);
  const sortedRules = ruleFinder.sortRules(unusedRules);

  let text = '## Unused Rules';

  let category = '';

  sortedRules.forEach((value, key) => {
    const newCategory = getCategory([key, value]);

    if (category !== newCategory) {
      category = newCategory;

      text += `\n\n${category}\n\n`;
    }

    text += `- [ ] ${key}\n`;
  });

  fs.writeFileSync(save, text, { encoding: 'utf-8', flag: 'w' });
} else if (unused) {
  const unusedRules = ruleFinder.findUnused(program.unused, include);
  const numOfUnused = Array.from(unusedRules).length;

  if (numOfUnused) {
    unusedRules.forEach((value, key) => {
      let description = '';

      // eslint-plugin-import does not define a docs
      if (value.meta.docs && value.meta.docs.description) {
        description = value.meta.docs.description;
      }

      stderr(`Not Defined: ${key}(${description})\n`);
    });

    stderr(`\n${numOfUnused} rules not defined \n\n`);
    process.exit(1);
  } else {
    stdout('\nNo unused rules\n\n');
  }
} else {
  program.help();
}
