// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LoadConfig should have all the rules 1`] = `
Map {
  "no-native-reassign" => Object {
    "create": [Function],
    "meta": Object {
      "deprecated": true,
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow assignments to native objects or read-only global variables",
        "recommended": false,
        "replacedBy": Array [
          "no-global-assign",
        ],
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "exceptions": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
              "uniqueItems": true,
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "prefer-reflect" => Object {
    "create": [Function],
    "meta": Object {
      "deprecated": true,
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require \`Reflect\` methods where applicable",
        "recommended": false,
        "replacedBy": Array [],
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "exceptions": Object {
              "items": Object {
                "enum": Array [
                  "apply",
                  "call",
                  "delete",
                  "defineProperty",
                  "getOwnPropertyDescriptor",
                  "getPrototypeOf",
                  "setPrototypeOf",
                  "isExtensible",
                  "getOwnPropertyNames",
                  "preventExtensions",
                ],
              },
              "type": "array",
              "uniqueItems": true,
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-negated-in-lhs" => Object {
    "create": [Function],
    "meta": Object {
      "deprecated": true,
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow negating the left operand in \`in\` expressions",
        "recommended": false,
        "replacedBy": Array [
          "no-unsafe-negation",
        ],
      },
      "schema": Array [],
    },
  },
  "indent-legacy" => Object {
    "create": [Function],
    "meta": Object {
      "deprecated": true,
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent indentation",
        "recommended": false,
        "replacedBy": Array [
          "indent",
        ],
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "tab",
              ],
            },
            Object {
              "minimum": 0,
              "type": "integer",
            },
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "ArrayExpression": Object {
              "oneOf": Array [
                Object {
                  "minimum": 0,
                  "type": "integer",
                },
                Object {
                  "enum": Array [
                    "first",
                  ],
                },
              ],
            },
            "CallExpression": Object {
              "properties": Object {
                "parameters": Object {
                  "oneOf": Array [
                    Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                    Object {
                      "enum": Array [
                        "first",
                      ],
                    },
                  ],
                },
              },
              "type": "object",
            },
            "FunctionDeclaration": Object {
              "properties": Object {
                "body": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "parameters": Object {
                  "oneOf": Array [
                    Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                    Object {
                      "enum": Array [
                        "first",
                      ],
                    },
                  ],
                },
              },
              "type": "object",
            },
            "FunctionExpression": Object {
              "properties": Object {
                "body": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "parameters": Object {
                  "oneOf": Array [
                    Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                    Object {
                      "enum": Array [
                        "first",
                      ],
                    },
                  ],
                },
              },
              "type": "object",
            },
            "MemberExpression": Object {
              "minimum": 0,
              "type": "integer",
            },
            "ObjectExpression": Object {
              "oneOf": Array [
                Object {
                  "minimum": 0,
                  "type": "integer",
                },
                Object {
                  "enum": Array [
                    "first",
                  ],
                },
              ],
            },
            "SwitchCase": Object {
              "minimum": 0,
              "type": "integer",
            },
            "VariableDeclarator": Object {
              "oneOf": Array [
                Object {
                  "minimum": 0,
                  "type": "integer",
                },
                Object {
                  "properties": Object {
                    "const": Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "let": Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "var": Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
            },
            "outerIIFEBody": Object {
              "minimum": 0,
              "type": "integer",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "lines-around-directive" => Object {
    "create": [Function],
    "meta": Object {
      "deprecated": true,
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow newlines around directives",
        "recommended": false,
        "replacedBy": Array [
          "padding-line-between-statements",
        ],
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "always",
                "never",
              ],
            },
            Object {
              "additionalProperties": false,
              "minProperties": 2,
              "properties": Object {
                "after": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
                "before": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "newline-after-var" => Object {
    "create": [Function],
    "meta": Object {
      "deprecated": true,
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow an empty line after variable declarations",
        "recommended": false,
        "replacedBy": Array [
          "padding-line-between-statements",
        ],
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "never",
            "always",
          ],
        },
      ],
    },
  },
  "newline-before-return" => Object {
    "create": [Function],
    "meta": Object {
      "deprecated": true,
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require an empty line before \`return\` statements",
        "recommended": false,
        "replacedBy": Array [
          "padding-line-between-statements",
        ],
      },
      "fixable": "whitespace",
      "schema": Array [],
    },
  },
  "no-spaced-func" => Object {
    "create": [Function],
    "meta": Object {
      "deprecated": true,
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow spacing between function identifiers and their applications (deprecated)",
        "recommended": false,
        "replacedBy": Array [
          "func-call-spacing",
        ],
      },
      "fixable": "whitespace",
      "schema": Array [],
    },
  },
  "accessor-pairs" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "enforce getter and setter pairs in objects",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "getWithoutSet": Object {
              "type": "boolean",
            },
            "setWithoutGet": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "array-callback-return" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "enforce \`return\` statements in callbacks of array methods",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "block-scoped-var" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "enforce the use of variables within the scope they are defined",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "class-methods-use-this" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "enforce that class methods utilize \`this\`",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "exceptMethods": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "complexity" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "enforce a maximum cyclomatic complexity allowed in a program",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "minimum": 0,
              "type": "integer",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "max": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "maximum": Object {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "consistent-return" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "require \`return\` statements to either always or never specify values",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "treatUndefinedAsUnspecified": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "curly" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "enforce consistent brace style for all control statements",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Object {
        "anyOf": Array [
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "all",
                ],
              },
            ],
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
          },
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "multi",
                  "multi-line",
                  "multi-or-nest",
                ],
              },
              Object {
                "enum": Array [
                  "consistent",
                ],
              },
            ],
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
          },
        ],
      },
    },
  },
  "default-case" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "require \`default\` cases in \`switch\` statements",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "commentPattern": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "dot-location" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "enforce consistent newlines before and after dots",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "enum": Array [
            "object",
            "property",
          ],
        },
      ],
    },
  },
  "dot-notation" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "enforce dot notation whenever possible",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowKeywords": Object {
              "type": "boolean",
            },
            "allowPattern": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "eqeqeq" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "require the use of \`===\` and \`!==\`",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Object {
        "anyOf": Array [
          Object {
            "additionalItems": false,
            "items": Array [
              Object {
                "enum": Array [
                  "always",
                ],
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "null": Object {
                    "enum": Array [
                      "always",
                      "never",
                      "ignore",
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
          Object {
            "additionalItems": false,
            "items": Array [
              Object {
                "enum": Array [
                  "smart",
                  "allow-null",
                ],
              },
            ],
            "type": "array",
          },
        ],
      },
    },
  },
  "guard-for-in" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "require \`for-in\` loops to include an \`if\` statement",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-alert" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow the use of \`alert\`, \`confirm\`, and \`prompt\`",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-caller" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow the use of \`arguments.caller\` or \`arguments.callee\`",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-case-declarations" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow lexical declarations in case clauses",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-div-regex" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow division operators explicitly at the beginning of regular expressions",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-else-return" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow \`else\` blocks after \`return\` statements in \`if\` statements",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-empty-function" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow empty functions",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allow": Object {
              "items": Object {
                "enum": Array [
                  "functions",
                  "arrowFunctions",
                  "generatorFunctions",
                  "methods",
                  "generatorMethods",
                  "getters",
                  "setters",
                  "constructors",
                ],
              },
              "type": "array",
              "uniqueItems": true,
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-empty-pattern" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow empty destructuring patterns",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-eq-null" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow \`null\` comparisons without type-checking operators",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-eval" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow the use of \`eval()\`",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowIndirect": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-extend-native" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow extending native types",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "exceptions": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
              "uniqueItems": true,
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-extra-bind" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow unnecessary calls to \`.bind()\`",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-extra-label" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow unnecessary labels",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-fallthrough" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow fallthrough of \`case\` statements",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "commentPattern": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-floating-decimal" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow leading or trailing decimal points in numeric literals",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-global-assign" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow assignments to native objects or read-only global variables",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "exceptions": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
              "uniqueItems": true,
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-implicit-coercion" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow shorthand type conversions",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allow": Object {
              "items": Object {
                "enum": Array [
                  "~",
                  "!!",
                  "+",
                  "*",
                ],
              },
              "type": "array",
              "uniqueItems": true,
            },
            "boolean": Object {
              "type": "boolean",
            },
            "number": Object {
              "type": "boolean",
            },
            "string": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-implicit-globals" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow variable and \`function\` declarations in the global scope",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-implied-eval" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow the use of \`eval()\`-like methods",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-invalid-this" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow \`this\` keywords outside of classes or class-like objects",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-iterator" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow the use of the \`__iterator__\` property",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-labels" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow labeled statements",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowLoop": Object {
              "type": "boolean",
            },
            "allowSwitch": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-lone-blocks" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow unnecessary nested blocks",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-loop-func" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow \`function\` declarations and expressions inside loop statements",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-magic-numbers" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow magic numbers",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "detectObjects": Object {
              "type": "boolean",
            },
            "enforceConst": Object {
              "type": "boolean",
            },
            "ignore": Object {
              "items": Object {
                "type": "number",
              },
              "type": "array",
              "uniqueItems": true,
            },
            "ignoreArrayIndexes": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-multi-spaces" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow multiple spaces",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "exceptions": Object {
              "additionalProperties": false,
              "patternProperties": Object {
                "^([A-Z][a-z]*)+$": Object {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
            "ignoreEOLComments": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-multi-str" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow multiline strings",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-new" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow \`new\` operators outside of assignments or comparisons",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-new-func" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow \`new\` operators with the \`Function\` object",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-new-wrappers" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow \`new\` operators with the \`String\`, \`Number\`, and \`Boolean\` objects",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-octal" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow octal literals",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-octal-escape" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow octal escape sequences in string literals",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-param-reassign" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow reassigning \`function\` parameters",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "additionalProperties": false,
              "properties": Object {
                "props": Object {
                  "enum": Array [
                    false,
                  ],
                },
              },
              "type": "object",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "ignorePropertyModificationsFor": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "props": Object {
                  "enum": Array [
                    true,
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "no-proto" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow the use of the \`__proto__\` property",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-redeclare" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow variable redeclaration",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "builtinGlobals": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-restricted-properties" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow certain properties on certain objects",
        "recommended": false,
      },
      "schema": Object {
        "items": Object {
          "anyOf": Array [
            Object {
              "additionalProperties": false,
              "properties": Object {
                "message": Object {
                  "type": "string",
                },
                "object": Object {
                  "type": "string",
                },
                "property": Object {
                  "type": "string",
                },
              },
              "required": Array [
                "object",
              ],
              "type": "object",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "message": Object {
                  "type": "string",
                },
                "object": Object {
                  "type": "string",
                },
                "property": Object {
                  "type": "string",
                },
              },
              "required": Array [
                "property",
              ],
              "type": "object",
            },
          ],
        },
        "type": "array",
        "uniqueItems": true,
      },
    },
  },
  "no-return-assign" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow assignment operators in \`return\` statements",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "enum": Array [
            "except-parens",
            "always",
          ],
        },
      ],
    },
  },
  "no-return-await" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow unnecessary \`return await\`",
        "recommended": false,
      },
      "fixable": null,
      "schema": Array [],
    },
  },
  "no-script-url" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow \`javascript:\` urls",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-self-assign" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow assignments where both sides are exactly the same",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "props": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-self-compare" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow comparisons where both sides are exactly the same",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-sequences" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow comma operators",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-throw-literal" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow throwing literals as exceptions",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-unmodified-loop-condition" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow unmodified loop conditions",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-unused-expressions" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow unused expressions",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowShortCircuit": Object {
              "type": "boolean",
            },
            "allowTaggedTemplates": Object {
              "type": "boolean",
            },
            "allowTernary": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-unused-labels" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow unused labels",
        "recommended": true,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-useless-call" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow unnecessary calls to \`.call()\` and \`.apply()\`",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-useless-concat" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow unnecessary concatenation of literals or template literals",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-useless-escape" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow unnecessary escape characters",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-useless-return" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow redundant return statements",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-void" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow \`void\` operators",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-warning-comments" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow specified warning terms in comments",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "location": Object {
              "enum": Array [
                "start",
                "anywhere",
              ],
            },
            "terms": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-with" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow \`with\` statements",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "prefer-promise-reject-errors" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "require using Error objects as Promise rejection reasons",
        "recommended": false,
      },
      "fixable": null,
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowEmptyReject": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "radix" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "enforce the consistent use of the radix argument when using \`parseInt()\`",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "as-needed",
          ],
        },
      ],
    },
  },
  "require-await" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "disallow async functions which have no \`await\` expression",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "vars-on-top" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "require \`var\` declarations be placed at the top of their containing scope",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "wrap-iife" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "require parentheses around immediate \`function\` invocations",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "enum": Array [
            "outside",
            "inside",
            "any",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "functionPrototypeMethods": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "yoda" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Best Practices",
        "description": "require or disallow \\"Yoda\\" conditions",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "exceptRange": Object {
              "type": "boolean",
            },
            "onlyEquality": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "arrow-body-style" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require braces around arrow function bodies",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Object {
        "anyOf": Array [
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "always",
                  "never",
                ],
              },
            ],
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
          },
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "as-needed",
                ],
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "requireReturnForObjectLiteral": Object {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
          },
        ],
      },
    },
  },
  "arrow-parens" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require parentheses around arrow function arguments",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "as-needed",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "requireForBlockBody": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "arrow-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "enforce consistent spacing before and after the arrow in arrow functions",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "after": Object {
              "type": "boolean",
            },
            "before": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "constructor-super" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require \`super()\` calls in constructors",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "generator-star-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "enforce consistent spacing around \`*\` operators in generator functions",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "before",
                "after",
                "both",
                "neither",
              ],
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "after": Object {
                  "type": "boolean",
                },
                "before": Object {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "no-class-assign" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow reassigning class members",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-confusing-arrow" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow arrow functions where they could be confused with comparisons",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowParens": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-const-assign" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow reassigning \`const\` variables",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-dupe-class-members" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow duplicate class members",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-duplicate-imports" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow duplicate module imports",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "includeExports": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-new-symbol" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow \`new\` operators with the \`Symbol\` object",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-restricted-imports" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow specified modules when loaded by \`import\`",
        "recommended": false,
      },
      "schema": Object {
        "anyOf": Array [
          Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
            "uniqueItems": true,
          },
          Object {
            "additionalItems": false,
            "items": Array [
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "paths": Object {
                    "items": Object {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "patterns": Object {
                    "items": Object {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
        ],
      },
    },
  },
  "no-this-before-super" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow \`this\`/\`super\` before calling \`super()\` in constructors",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-useless-computed-key" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow unnecessary computed property keys in object literals",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-useless-constructor" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow unnecessary constructors",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-useless-rename" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow renaming import, export, and destructured assignments to the same name",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "ignoreDestructuring": Object {
              "type": "boolean",
            },
            "ignoreExport": Object {
              "type": "boolean",
            },
            "ignoreImport": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-var" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require \`let\` or \`const\` instead of \`var\`",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "object-shorthand" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require or disallow method and property shorthand syntax for object literals",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Object {
        "anyOf": Array [
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "always",
                  "methods",
                  "properties",
                  "never",
                  "consistent",
                  "consistent-as-needed",
                ],
              },
            ],
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
          },
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "always",
                  "methods",
                  "properties",
                ],
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "avoidQuotes": Object {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
          },
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "always",
                  "methods",
                ],
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "avoidExplicitReturnArrows": Object {
                    "type": "boolean",
                  },
                  "avoidQuotes": Object {
                    "type": "boolean",
                  },
                  "ignoreConstructors": Object {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
          },
        ],
      },
    },
  },
  "prefer-arrow-callback" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require arrow functions as callbacks",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowNamedFunctions": Object {
              "type": "boolean",
            },
            "allowUnboundThis": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "prefer-const" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require \`const\` declarations for variables that are never reassigned after declared",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "destructuring": Object {
              "enum": Array [
                "any",
                "all",
              ],
            },
            "ignoreReadBeforeAssign": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "prefer-destructuring" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require destructuring from arrays and/or objects",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "additionalProperties": false,
              "properties": Object {
                "AssignmentExpression": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "array": Object {
                      "type": "boolean",
                    },
                    "object": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "VariableDeclarator": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "array": Object {
                      "type": "boolean",
                    },
                    "object": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              },
              "type": "object",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "array": Object {
                  "type": "boolean",
                },
                "object": Object {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "enforceForRenamedProperties": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "prefer-numeric-literals" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "disallow \`parseInt()\` and \`Number.parseInt()\` in favor of binary, octal, and hexadecimal literals",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "prefer-rest-params" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require rest parameters instead of \`arguments\`",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "prefer-spread" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require spread operators instead of \`.apply()\`",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "prefer-template" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require template literals instead of string concatenation",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "require-yield" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require generator functions to contain \`yield\`",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "rest-spread-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "enforce spacing between rest and spread operators and their expressions",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
      ],
    },
  },
  "sort-imports" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "enforce sorted import declarations within modules",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "ignoreCase": Object {
              "type": "boolean",
            },
            "ignoreMemberSort": Object {
              "type": "boolean",
            },
            "memberSyntaxSortOrder": Object {
              "items": Object {
                "enum": Array [
                  "none",
                  "all",
                  "multiple",
                  "single",
                ],
              },
              "maxItems": 4,
              "minItems": 4,
              "type": "array",
              "uniqueItems": true,
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "symbol-description" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require symbol descriptions",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "template-curly-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require or disallow spacing around embedded expressions of template strings",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
      ],
    },
  },
  "yield-star-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "ECMAScript 6",
        "description": "require or disallow spacing around the \`*\` in \`yield*\` expressions",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "before",
                "after",
                "both",
                "neither",
              ],
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "after": Object {
                  "type": "boolean",
                },
                "before": Object {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "callback-return" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Node.js and CommonJS",
        "description": "require \`return\` statements after callbacks",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
      ],
    },
  },
  "global-require" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Node.js and CommonJS",
        "description": "require \`require()\` calls to be placed at top-level module scope",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "handle-callback-err" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Node.js and CommonJS",
        "description": "require error handling in callbacks",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "type": "string",
        },
      ],
    },
  },
  "no-buffer-constructor" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Node.js and CommonJS",
        "description": "disallow use of the Buffer() constructor",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-mixed-requires" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Node.js and CommonJS",
        "description": "disallow \`require\` calls to be mixed with regular variable declarations",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "type": "boolean",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "allowCall": Object {
                  "type": "boolean",
                },
                "grouping": Object {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "no-new-require" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Node.js and CommonJS",
        "description": "disallow \`new\` operators with calls to \`require\`",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-path-concat" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Node.js and CommonJS",
        "description": "disallow string concatenation with \`__dirname\` and \`__filename\`",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-process-env" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Node.js and CommonJS",
        "description": "disallow the use of \`process.env\`",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-process-exit" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Node.js and CommonJS",
        "description": "disallow the use of \`process.exit()\`",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-restricted-modules" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Node.js and CommonJS",
        "description": "disallow specified modules when loaded by \`require\`",
        "recommended": false,
      },
      "schema": Object {
        "anyOf": Array [
          Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
            "uniqueItems": true,
          },
          Object {
            "additionalItems": false,
            "items": Array [
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "paths": Object {
                    "items": Object {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "patterns": Object {
                    "items": Object {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
        ],
      },
    },
  },
  "no-sync" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Node.js and CommonJS",
        "description": "disallow synchronous methods",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowAtRootLevel": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "for-direction" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "enforce \\"for\\" loop update clause moving the counter in the right direction.",
        "recommended": false,
      },
      "fixable": null,
      "schema": Array [],
    },
  },
  "getter-return" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "enforce \`return\` statements in getters",
        "recommended": false,
      },
      "fixable": null,
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowImplicit": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-await-in-loop" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow \`await\` inside of loops",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-compare-neg-zero" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow comparing against -0",
        "recommended": true,
      },
      "fixable": null,
      "schema": Array [],
    },
  },
  "no-cond-assign" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow assignment operators in conditional expressions",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "enum": Array [
            "except-parens",
            "always",
          ],
        },
      ],
    },
  },
  "no-console" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow the use of \`console\`",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allow": Object {
              "items": Object {
                "type": "string",
              },
              "minItems": 1,
              "type": "array",
              "uniqueItems": true,
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-constant-condition" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow constant expressions in conditions",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "checkLoops": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-control-regex" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow control characters in regular expressions",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-debugger" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow the use of \`debugger\`",
        "recommended": true,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-dupe-args" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow duplicate arguments in \`function\` definitions",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-dupe-keys" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow duplicate keys in object literals",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-duplicate-case" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow duplicate case labels",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-empty" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow empty block statements",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowEmptyCatch": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-empty-character-class" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow empty character classes in regular expressions",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-ex-assign" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow reassigning exceptions in \`catch\` clauses",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-extra-boolean-cast" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow unnecessary boolean casts",
        "recommended": true,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-extra-parens" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow unnecessary parentheses",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Object {
        "anyOf": Array [
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "functions",
                ],
              },
            ],
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
          },
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "all",
                ],
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "conditionalAssign": Object {
                    "type": "boolean",
                  },
                  "enforceForArrowConditionals": Object {
                    "type": "boolean",
                  },
                  "ignoreJSX": Object {
                    "enum": Array [
                      "none",
                      "all",
                      "single-line",
                      "multi-line",
                    ],
                  },
                  "nestedBinaryExpressions": Object {
                    "type": "boolean",
                  },
                  "returnAssign": Object {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
          },
        ],
      },
    },
  },
  "no-extra-semi" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow unnecessary semicolons",
        "recommended": true,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-func-assign" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow reassigning \`function\` declarations",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-inner-declarations" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow variable or \`function\` declarations in nested blocks",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "enum": Array [
            "functions",
            "both",
          ],
        },
      ],
    },
  },
  "no-invalid-regexp" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow invalid regular expression strings in \`RegExp\` constructors",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowConstructorFlags": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-irregular-whitespace" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow irregular whitespace outside of strings and comments",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "skipComments": Object {
              "type": "boolean",
            },
            "skipRegExps": Object {
              "type": "boolean",
            },
            "skipStrings": Object {
              "type": "boolean",
            },
            "skipTemplates": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-obj-calls" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow calling global object properties as functions",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-prototype-builtins" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow calling some \`Object.prototype\` methods directly on objects",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-regex-spaces" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow multiple spaces in regular expressions",
        "recommended": true,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-sparse-arrays" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow sparse arrays",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-template-curly-in-string" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow template literal placeholder syntax in regular strings",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-unexpected-multiline" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow confusing multiline expressions",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-unreachable" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow unreachable code after \`return\`, \`throw\`, \`continue\`, and \`break\` statements",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-unsafe-finally" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow control flow statements in \`finally\` blocks",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-unsafe-negation" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "disallow negating the left operand of relational operators",
        "recommended": true,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "use-isnan" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "require calls to \`isNaN()\` when checking for \`NaN\`",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "valid-jsdoc" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "enforce valid JSDoc comments",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "matchDescription": Object {
              "type": "string",
            },
            "prefer": Object {
              "additionalProperties": Object {
                "type": "string",
              },
              "type": "object",
            },
            "preferType": Object {
              "additionalProperties": Object {
                "type": "string",
              },
              "type": "object",
            },
            "requireParamDescription": Object {
              "type": "boolean",
            },
            "requireReturn": Object {
              "type": "boolean",
            },
            "requireReturnDescription": Object {
              "type": "boolean",
            },
            "requireReturnType": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "valid-typeof" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Possible Errors",
        "description": "enforce comparing \`typeof\` expressions against valid strings",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "requireStringLiterals": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "strict" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Strict Mode",
        "description": "require or disallow strict mode directives",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "enum": Array [
            "never",
            "global",
            "function",
            "safe",
          ],
        },
      ],
    },
  },
  "array-bracket-newline" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce linebreaks after opening and before closing array brackets",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "always",
                "never",
              ],
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "minItems": Object {
                  "minimum": 0,
                  "type": Array [
                    "integer",
                    "null",
                  ],
                },
                "multiline": Object {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "array-bracket-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing inside array brackets",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "arraysInArrays": Object {
              "type": "boolean",
            },
            "objectsInArrays": Object {
              "type": "boolean",
            },
            "singleValue": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "array-element-newline" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce line breaks after each array element",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "always",
                "never",
              ],
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "minItems": Object {
                  "minimum": 0,
                  "type": Array [
                    "integer",
                    "null",
                  ],
                },
                "multiline": Object {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "block-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing inside single-line blocks",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
      ],
    },
  },
  "brace-style" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent brace style for blocks",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "1tbs",
            "stroustrup",
            "allman",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowSingleLine": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "camelcase" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce camelcase naming convention",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "properties": Object {
              "enum": Array [
                "always",
                "never",
              ],
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "capitalized-comments" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce or disallow capitalization of the first letter of a comment",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
        Object {
          "oneOf": Array [
            Object {
              "additionalProperties": false,
              "properties": Object {
                "ignoreConsecutiveComments": Object {
                  "type": "boolean",
                },
                "ignoreInlineComments": Object {
                  "type": "boolean",
                },
                "ignorePattern": Object {
                  "type": "string",
                },
              },
              "type": "object",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "block": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "ignoreConsecutiveComments": Object {
                      "type": "boolean",
                    },
                    "ignoreInlineComments": Object {
                      "type": "boolean",
                    },
                    "ignorePattern": Object {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                "line": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "ignoreConsecutiveComments": Object {
                      "type": "boolean",
                    },
                    "ignoreInlineComments": Object {
                      "type": "boolean",
                    },
                    "ignorePattern": Object {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "comma-dangle" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow trailing commas",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Object {
        "definitions": Object {
          "value": Object {
            "enum": Array [
              "always-multiline",
              "always",
              "never",
              "only-multiline",
            ],
          },
          "valueWithIgnore": Object {
            "enum": Array [
              "always-multiline",
              "always",
              "ignore",
              "never",
              "only-multiline",
            ],
          },
        },
        "items": Array [
          Object {
            "oneOf": Array [
              Object {
                "$ref": "#/definitions/value",
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "arrays": Object {
                    "$ref": "#/definitions/valueWithIgnore",
                  },
                  "exports": Object {
                    "$ref": "#/definitions/valueWithIgnore",
                  },
                  "functions": Object {
                    "$ref": "#/definitions/valueWithIgnore",
                  },
                  "imports": Object {
                    "$ref": "#/definitions/valueWithIgnore",
                  },
                  "objects": Object {
                    "$ref": "#/definitions/valueWithIgnore",
                  },
                },
                "type": "object",
              },
            ],
          },
        ],
        "type": "array",
      },
    },
  },
  "comma-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing before and after commas",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "after": Object {
              "type": "boolean",
            },
            "before": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "comma-style" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent comma style",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "enum": Array [
            "first",
            "last",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "exceptions": Object {
              "additionalProperties": Object {
                "type": "boolean",
              },
              "type": "object",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "computed-property-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing inside computed property brackets",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
      ],
    },
  },
  "consistent-this" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent naming when capturing the current execution context",
        "recommended": false,
      },
      "schema": Object {
        "items": Object {
          "minLength": 1,
          "type": "string",
        },
        "type": "array",
        "uniqueItems": true,
      },
    },
  },
  "eol-last" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow newline at the end of files",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
            "unix",
            "windows",
          ],
        },
      ],
    },
  },
  "func-call-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow spacing between function identifiers and their invocations",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Object {
        "anyOf": Array [
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "never",
                ],
              },
            ],
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
          },
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "always",
                ],
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "allowNewlines": Object {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
          },
        ],
      },
    },
  },
  "func-name-matching" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require function names to match the name of the variable or property to which they are assigned",
        "recommended": false,
      },
      "schema": Object {
        "anyOf": Array [
          Object {
            "additionalItems": false,
            "items": Array [
              Object {
                "enum": Array [
                  "always",
                  "never",
                ],
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "includeCommonJSModuleExports": Object {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
          Object {
            "additionalItems": false,
            "items": Array [
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "includeCommonJSModuleExports": Object {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
        ],
      },
    },
  },
  "func-names" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow named \`function\` expressions",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "as-needed",
            "never",
          ],
        },
      ],
    },
  },
  "func-style" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce the consistent use of either \`function\` declarations or expressions",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "enum": Array [
            "declaration",
            "expression",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowArrowFunctions": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "id-blacklist" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow specified identifiers",
        "recommended": false,
      },
      "schema": Object {
        "items": Object {
          "type": "string",
        },
        "type": "array",
        "uniqueItems": true,
      },
    },
  },
  "id-length" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce minimum and maximum identifier lengths",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "exceptions": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
              "uniqueItems": true,
            },
            "max": Object {
              "type": "number",
            },
            "min": Object {
              "type": "number",
            },
            "properties": Object {
              "enum": Array [
                "always",
                "never",
              ],
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "id-match" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require identifiers to match a specified regular expression",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "type": "string",
        },
        Object {
          "properties": Object {
            "properties": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "indent" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent indentation",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "tab",
              ],
            },
            Object {
              "minimum": 0,
              "type": "integer",
            },
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "ArrayExpression": Object {
              "oneOf": Array [
                Object {
                  "minimum": 0,
                  "type": "integer",
                },
                Object {
                  "enum": Array [
                    "first",
                    "off",
                  ],
                },
              ],
            },
            "CallExpression": Object {
              "additionalProperties": false,
              "properties": Object {
                "arguments": Object {
                  "oneOf": Array [
                    Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                    Object {
                      "enum": Array [
                        "first",
                        "off",
                      ],
                    },
                  ],
                },
              },
              "type": "object",
            },
            "FunctionDeclaration": Object {
              "additionalProperties": false,
              "properties": Object {
                "body": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "parameters": Object {
                  "oneOf": Array [
                    Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                    Object {
                      "enum": Array [
                        "first",
                        "off",
                      ],
                    },
                  ],
                },
              },
              "type": "object",
            },
            "FunctionExpression": Object {
              "additionalProperties": false,
              "properties": Object {
                "body": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "parameters": Object {
                  "oneOf": Array [
                    Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                    Object {
                      "enum": Array [
                        "first",
                        "off",
                      ],
                    },
                  ],
                },
              },
              "type": "object",
            },
            "ImportDeclaration": Object {
              "oneOf": Array [
                Object {
                  "minimum": 0,
                  "type": "integer",
                },
                Object {
                  "enum": Array [
                    "first",
                    "off",
                  ],
                },
              ],
            },
            "MemberExpression": Object {
              "oneOf": Array [
                Object {
                  "minimum": 0,
                  "type": "integer",
                },
                Object {
                  "enum": Array [
                    "off",
                  ],
                },
              ],
            },
            "ObjectExpression": Object {
              "oneOf": Array [
                Object {
                  "minimum": 0,
                  "type": "integer",
                },
                Object {
                  "enum": Array [
                    "first",
                    "off",
                  ],
                },
              ],
            },
            "SwitchCase": Object {
              "minimum": 0,
              "type": "integer",
            },
            "VariableDeclarator": Object {
              "oneOf": Array [
                Object {
                  "minimum": 0,
                  "type": "integer",
                },
                Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "const": Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "let": Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "var": Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
            },
            "flatTernaryExpressions": Object {
              "type": "boolean",
            },
            "outerIIFEBody": Object {
              "minimum": 0,
              "type": "integer",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "jsx-quotes" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce the consistent use of either double or single quotes in JSX attributes",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "prefer-single",
            "prefer-double",
          ],
        },
      ],
    },
  },
  "key-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing between keys and values in object literal properties",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "anyOf": Array [
            Object {
              "additionalProperties": false,
              "properties": Object {
                "afterColon": Object {
                  "type": "boolean",
                },
                "align": Object {
                  "anyOf": Array [
                    Object {
                      "enum": Array [
                        "colon",
                        "value",
                      ],
                    },
                    Object {
                      "additionalProperties": false,
                      "properties": Object {
                        "afterColon": Object {
                          "type": "boolean",
                        },
                        "beforeColon": Object {
                          "type": "boolean",
                        },
                        "mode": Object {
                          "enum": Array [
                            "strict",
                            "minimum",
                          ],
                        },
                        "on": Object {
                          "enum": Array [
                            "colon",
                            "value",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
                "beforeColon": Object {
                  "type": "boolean",
                },
                "mode": Object {
                  "enum": Array [
                    "strict",
                    "minimum",
                  ],
                },
              },
              "type": "object",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "multiLine": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "afterColon": Object {
                      "type": "boolean",
                    },
                    "align": Object {
                      "anyOf": Array [
                        Object {
                          "enum": Array [
                            "colon",
                            "value",
                          ],
                        },
                        Object {
                          "additionalProperties": false,
                          "properties": Object {
                            "afterColon": Object {
                              "type": "boolean",
                            },
                            "beforeColon": Object {
                              "type": "boolean",
                            },
                            "mode": Object {
                              "enum": Array [
                                "strict",
                                "minimum",
                              ],
                            },
                            "on": Object {
                              "enum": Array [
                                "colon",
                                "value",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "beforeColon": Object {
                      "type": "boolean",
                    },
                    "mode": Object {
                      "enum": Array [
                        "strict",
                        "minimum",
                      ],
                    },
                  },
                  "type": "object",
                },
                "singleLine": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "afterColon": Object {
                      "type": "boolean",
                    },
                    "beforeColon": Object {
                      "type": "boolean",
                    },
                    "mode": Object {
                      "enum": Array [
                        "strict",
                        "minimum",
                      ],
                    },
                  },
                  "type": "object",
                },
              },
              "type": "object",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "align": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "afterColon": Object {
                      "type": "boolean",
                    },
                    "beforeColon": Object {
                      "type": "boolean",
                    },
                    "mode": Object {
                      "enum": Array [
                        "strict",
                        "minimum",
                      ],
                    },
                    "on": Object {
                      "enum": Array [
                        "colon",
                        "value",
                      ],
                    },
                  },
                  "type": "object",
                },
                "multiLine": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "afterColon": Object {
                      "type": "boolean",
                    },
                    "beforeColon": Object {
                      "type": "boolean",
                    },
                    "mode": Object {
                      "enum": Array [
                        "strict",
                        "minimum",
                      ],
                    },
                  },
                  "type": "object",
                },
                "singleLine": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "afterColon": Object {
                      "type": "boolean",
                    },
                    "beforeColon": Object {
                      "type": "boolean",
                    },
                    "mode": Object {
                      "enum": Array [
                        "strict",
                        "minimum",
                      ],
                    },
                  },
                  "type": "object",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "keyword-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing before and after keywords",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "after": Object {
              "type": "boolean",
            },
            "before": Object {
              "type": "boolean",
            },
            "overrides": Object {
              "additionalProperties": false,
              "properties": Object {
                "abstract": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "as": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "async": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "await": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "boolean": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "break": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "byte": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "case": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "catch": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "char": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "class": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "const": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "continue": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "debugger": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "default": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "delete": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "do": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "double": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "else": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "enum": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "export": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "extends": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "false": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "final": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "finally": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "float": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "for": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "from": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "function": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "get": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "goto": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "if": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "implements": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "import": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "in": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "instanceof": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "int": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "interface": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "let": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "long": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "native": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "new": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "null": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "of": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "package": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "private": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "protected": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "public": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "return": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "set": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "short": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "static": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "super": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "switch": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "synchronized": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "this": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "throw": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "throws": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "transient": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "true": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "try": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "typeof": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "var": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "void": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "volatile": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "while": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "with": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "yield": Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "after": Object {
                      "type": "boolean",
                    },
                    "before": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              },
              "type": "object",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "line-comment-position" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce position of line comments",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "above",
                "beside",
              ],
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "applyDefaultIgnorePatterns": Object {
                  "type": "boolean",
                },
                "applyDefaultPatterns": Object {
                  "type": "boolean",
                },
                "ignorePattern": Object {
                  "type": "string",
                },
                "position": Object {
                  "enum": Array [
                    "above",
                    "beside",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "linebreak-style" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent linebreak style",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "unix",
            "windows",
          ],
        },
      ],
    },
  },
  "lines-around-comment" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require empty lines around comments",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "afterBlockComment": Object {
              "type": "boolean",
            },
            "afterLineComment": Object {
              "type": "boolean",
            },
            "allowArrayEnd": Object {
              "type": "boolean",
            },
            "allowArrayStart": Object {
              "type": "boolean",
            },
            "allowBlockEnd": Object {
              "type": "boolean",
            },
            "allowBlockStart": Object {
              "type": "boolean",
            },
            "allowObjectEnd": Object {
              "type": "boolean",
            },
            "allowObjectStart": Object {
              "type": "boolean",
            },
            "applyDefaultIgnorePatterns": Object {
              "type": "boolean",
            },
            "beforeBlockComment": Object {
              "type": "boolean",
            },
            "beforeLineComment": Object {
              "type": "boolean",
            },
            "ignorePattern": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "max-depth" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce a maximum depth that blocks can be nested",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "minimum": 0,
              "type": "integer",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "max": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "maximum": Object {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "max-len" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce a maximum line length",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "anyOf": Array [
            Object {
              "additionalProperties": false,
              "properties": Object {
                "code": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "comments": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "ignoreComments": Object {
                  "type": "boolean",
                },
                "ignorePattern": Object {
                  "type": "string",
                },
                "ignoreRegExpLiterals": Object {
                  "type": "boolean",
                },
                "ignoreStrings": Object {
                  "type": "boolean",
                },
                "ignoreTemplateLiterals": Object {
                  "type": "boolean",
                },
                "ignoreTrailingComments": Object {
                  "type": "boolean",
                },
                "ignoreUrls": Object {
                  "type": "boolean",
                },
                "tabWidth": Object {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
            Object {
              "minimum": 0,
              "type": "integer",
            },
          ],
        },
        Object {
          "anyOf": Array [
            Object {
              "additionalProperties": false,
              "properties": Object {
                "code": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "comments": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "ignoreComments": Object {
                  "type": "boolean",
                },
                "ignorePattern": Object {
                  "type": "string",
                },
                "ignoreRegExpLiterals": Object {
                  "type": "boolean",
                },
                "ignoreStrings": Object {
                  "type": "boolean",
                },
                "ignoreTemplateLiterals": Object {
                  "type": "boolean",
                },
                "ignoreTrailingComments": Object {
                  "type": "boolean",
                },
                "ignoreUrls": Object {
                  "type": "boolean",
                },
                "tabWidth": Object {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
            Object {
              "minimum": 0,
              "type": "integer",
            },
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "code": Object {
              "minimum": 0,
              "type": "integer",
            },
            "comments": Object {
              "minimum": 0,
              "type": "integer",
            },
            "ignoreComments": Object {
              "type": "boolean",
            },
            "ignorePattern": Object {
              "type": "string",
            },
            "ignoreRegExpLiterals": Object {
              "type": "boolean",
            },
            "ignoreStrings": Object {
              "type": "boolean",
            },
            "ignoreTemplateLiterals": Object {
              "type": "boolean",
            },
            "ignoreTrailingComments": Object {
              "type": "boolean",
            },
            "ignoreUrls": Object {
              "type": "boolean",
            },
            "tabWidth": Object {
              "minimum": 0,
              "type": "integer",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "max-lines" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce a maximum number of lines per file",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "minimum": 0,
              "type": "integer",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "max": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "skipBlankLines": Object {
                  "type": "boolean",
                },
                "skipComments": Object {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "max-nested-callbacks" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce a maximum depth that callbacks can be nested",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "minimum": 0,
              "type": "integer",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "max": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "maximum": Object {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "max-params" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce a maximum number of parameters in function definitions",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "minimum": 0,
              "type": "integer",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "max": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "maximum": Object {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "max-statements" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce a maximum number of statements allowed in function blocks",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "minimum": 0,
              "type": "integer",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "max": Object {
                  "minimum": 0,
                  "type": "integer",
                },
                "maximum": Object {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "ignoreTopLevelFunctions": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "max-statements-per-line" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce a maximum number of statements allowed per line",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "max": Object {
              "minimum": 1,
              "type": "integer",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "multiline-ternary" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce newlines between operands of ternary expressions",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "always-multiline",
            "never",
          ],
        },
      ],
    },
  },
  "new-cap" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require constructor names to begin with a capital letter",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "capIsNew": Object {
              "type": "boolean",
            },
            "capIsNewExceptionPattern": Object {
              "type": "string",
            },
            "capIsNewExceptions": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
            "newIsCap": Object {
              "type": "boolean",
            },
            "newIsCapExceptionPattern": Object {
              "type": "string",
            },
            "newIsCapExceptions": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
            "properties": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "new-parens" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require parentheses when invoking a constructor with no arguments",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "newline-per-chained-call" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require a newline after each call in a method chain",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "ignoreChainWithDepth": Object {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-array-constructor" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow \`Array\` constructors",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-bitwise" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow bitwise operators",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allow": Object {
              "items": Object {
                "enum": Array [
                  "^",
                  "|",
                  "&",
                  "<<",
                  ">>",
                  ">>>",
                  "^=",
                  "|=",
                  "&=",
                  "<<=",
                  ">>=",
                  ">>>=",
                  "~",
                ],
              },
              "type": "array",
              "uniqueItems": true,
            },
            "int32Hint": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-continue" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow \`continue\` statements",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-inline-comments" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow inline comments after code",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-lonely-if" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow \`if\` statements as the only statement in \`else\` blocks",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-mixed-operators" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow mixed binary operators",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowSamePrecedence": Object {
              "type": "boolean",
            },
            "groups": Object {
              "items": Object {
                "items": Object {
                  "enum": Array [
                    "+",
                    "-",
                    "*",
                    "/",
                    "%",
                    "**",
                    "&",
                    "|",
                    "^",
                    "~",
                    "<<",
                    ">>",
                    ">>>",
                    "==",
                    "!=",
                    "===",
                    "!==",
                    ">",
                    ">=",
                    "<",
                    "<=",
                    "&&",
                    "||",
                    "in",
                    "instanceof",
                  ],
                },
                "minItems": 2,
                "type": "array",
                "uniqueItems": true,
              },
              "type": "array",
              "uniqueItems": true,
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-mixed-spaces-and-tabs" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow mixed spaces and tabs for indentation",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "enum": Array [
            "smart-tabs",
            true,
            false,
          ],
        },
      ],
    },
  },
  "no-multi-assign" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow use of chained assignment expressions",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-multiple-empty-lines" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow multiple empty lines",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "max": Object {
              "minimum": 0,
              "type": "integer",
            },
            "maxBOF": Object {
              "minimum": 0,
              "type": "integer",
            },
            "maxEOF": Object {
              "minimum": 0,
              "type": "integer",
            },
          },
          "required": Array [
            "max",
          ],
          "type": "object",
        },
      ],
    },
  },
  "no-negated-condition" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow negated conditions",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-nested-ternary" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow nested ternary expressions",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-new-object" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow \`Object\` constructors",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-plusplus" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow the unary operators \`++\` and \`--\`",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowForLoopAfterthoughts": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-restricted-syntax" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow specified syntax",
        "recommended": false,
      },
      "schema": Object {
        "items": Array [
          Object {
            "oneOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "message": Object {
                    "type": "string",
                  },
                  "selector": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "selector",
                ],
                "type": "object",
              },
            ],
          },
        ],
        "minItems": 0,
        "type": "array",
        "uniqueItems": true,
      },
    },
  },
  "no-tabs" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow all tabs",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-ternary" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow ternary operators",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-trailing-spaces" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow trailing whitespace at the end of lines",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "ignoreComments": Object {
              "type": "boolean",
            },
            "skipBlankLines": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-underscore-dangle" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow dangling underscores in identifiers",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allow": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
            "allowAfterSuper": Object {
              "type": "boolean",
            },
            "allowAfterThis": Object {
              "type": "boolean",
            },
            "enforceInMethodNames": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-unneeded-ternary" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow ternary operators when simpler alternatives exist",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "defaultAssignment": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-whitespace-before-property" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "disallow whitespace before properties",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [],
    },
  },
  "nonblock-statement-body-position" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce the location of single-line statements",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "beside",
            "below",
            "any",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "overrides": Object {
              "additionalProperties": false,
              "properties": Object {
                "do": Object {
                  "enum": Array [
                    "beside",
                    "below",
                    "any",
                  ],
                },
                "else": Object {
                  "enum": Array [
                    "beside",
                    "below",
                    "any",
                  ],
                },
                "for": Object {
                  "enum": Array [
                    "beside",
                    "below",
                    "any",
                  ],
                },
                "if": Object {
                  "enum": Array [
                    "beside",
                    "below",
                    "any",
                  ],
                },
                "while": Object {
                  "enum": Array [
                    "beside",
                    "below",
                    "any",
                  ],
                },
              },
            },
          },
        },
      ],
    },
  },
  "object-curly-newline" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent line breaks inside braces",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "oneOf": Array [
                Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
                Object {
                  "additionalProperties": false,
                  "minProperties": 1,
                  "properties": Object {
                    "consistent": Object {
                      "type": "boolean",
                    },
                    "minProperties": Object {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "multiline": Object {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
            Object {
              "additionalProperties": false,
              "minProperties": 1,
              "properties": Object {
                "ObjectExpression": Object {
                  "oneOf": Array [
                    Object {
                      "enum": Array [
                        "always",
                        "never",
                      ],
                    },
                    Object {
                      "additionalProperties": false,
                      "minProperties": 1,
                      "properties": Object {
                        "consistent": Object {
                          "type": "boolean",
                        },
                        "minProperties": Object {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "multiline": Object {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
                "ObjectPattern": Object {
                  "oneOf": Array [
                    Object {
                      "enum": Array [
                        "always",
                        "never",
                      ],
                    },
                    Object {
                      "additionalProperties": false,
                      "minProperties": 1,
                      "properties": Object {
                        "consistent": Object {
                          "type": "boolean",
                        },
                        "minProperties": Object {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "multiline": Object {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "object-curly-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing inside braces",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "arraysInObjects": Object {
              "type": "boolean",
            },
            "objectsInObjects": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "object-property-newline" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce placing object properties on separate lines",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allowMultiplePropertiesPerLine": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "one-var" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce variables to be declared either together or separately in functions",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "always",
                "never",
              ],
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "const": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
                "let": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
                "var": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
              },
              "type": "object",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "initialized": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
                "uninitialized": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "one-var-declaration-per-line" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow newlines around variable declarations",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "initializations",
          ],
        },
      ],
    },
  },
  "operator-assignment" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow assignment operator shorthand where possible",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
      ],
    },
  },
  "operator-linebreak" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent linebreak style for operators",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "enum": Array [
            "after",
            "before",
            "none",
            null,
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "overrides": Object {
              "properties": Object {
                "anyOf": Object {
                  "enum": Array [
                    "after",
                    "before",
                    "none",
                    "ignore",
                  ],
                  "type": "string",
                },
              },
              "type": "object",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "padded-blocks" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow padding within blocks",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "always",
                "never",
              ],
            },
            Object {
              "additionalProperties": false,
              "minProperties": 1,
              "properties": Object {
                "blocks": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
                "classes": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
                "switches": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "padding-line-between-statements" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow padding lines between statements",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Object {
        "additionalItems": false,
        "definitions": Object {
          "paddingType": Object {
            "enum": Array [
              "any",
              "never",
              "always",
            ],
          },
          "statementType": Object {
            "anyOf": Array [
              Object {
                "enum": Array [
                  "*",
                  "block-like",
                  "cjs-export",
                  "cjs-import",
                  "directive",
                  "expression",
                  "multiline-block-like",
                  "block",
                  "empty",
                  "break",
                  "case",
                  "class",
                  "const",
                  "continue",
                  "debugger",
                  "default",
                  "do",
                  "export",
                  "for",
                  "function",
                  "if",
                  "import",
                  "let",
                  "return",
                  "switch",
                  "throw",
                  "try",
                  "var",
                  "while",
                  "with",
                ],
              },
              Object {
                "additionalItems": false,
                "items": Object {
                  "enum": Array [
                    "*",
                    "block-like",
                    "cjs-export",
                    "cjs-import",
                    "directive",
                    "expression",
                    "multiline-block-like",
                    "block",
                    "empty",
                    "break",
                    "case",
                    "class",
                    "const",
                    "continue",
                    "debugger",
                    "default",
                    "do",
                    "export",
                    "for",
                    "function",
                    "if",
                    "import",
                    "let",
                    "return",
                    "switch",
                    "throw",
                    "try",
                    "var",
                    "while",
                    "with",
                  ],
                },
                "minItems": 1,
                "type": "array",
                "uniqueItems": true,
              },
            ],
          },
        },
        "items": Object {
          "additionalProperties": false,
          "properties": Object {
            "blankLine": Object {
              "$ref": "#/definitions/paddingType",
            },
            "next": Object {
              "$ref": "#/definitions/statementType",
            },
            "prev": Object {
              "$ref": "#/definitions/statementType",
            },
          },
          "required": Array [
            "blankLine",
            "prev",
            "next",
          ],
          "type": "object",
        },
        "type": "array",
      },
    },
  },
  "quote-props" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require quotes around object literal property names",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Object {
        "anyOf": Array [
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "always",
                  "as-needed",
                  "consistent",
                  "consistent-as-needed",
                ],
              },
            ],
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
          },
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "always",
                  "as-needed",
                  "consistent",
                  "consistent-as-needed",
                ],
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "keywords": Object {
                    "type": "boolean",
                  },
                  "numbers": Object {
                    "type": "boolean",
                  },
                  "unnecessary": Object {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
          },
        ],
      },
    },
  },
  "quotes" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce the consistent use of either backticks, double, or single quotes",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [
        Object {
          "enum": Array [
            "single",
            "double",
            "backtick",
          ],
        },
        Object {
          "anyOf": Array [
            Object {
              "enum": Array [
                "avoid-escape",
              ],
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "allowTemplateLiterals": Object {
                  "type": "boolean",
                },
                "avoidEscape": Object {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "require-jsdoc" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require JSDoc comments",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "require": Object {
              "additionalProperties": false,
              "properties": Object {
                "ArrowFunctionExpression": Object {
                  "type": "boolean",
                },
                "ClassDeclaration": Object {
                  "type": "boolean",
                },
                "FunctionDeclaration": Object {
                  "type": "boolean",
                },
                "MethodDefinition": Object {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "semi" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow semicolons instead of ASI",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Object {
        "anyOf": Array [
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "never",
                ],
              },
            ],
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
          },
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "always",
                ],
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "omitLastInOneLineBlock": Object {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
          },
        ],
      },
    },
  },
  "semi-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing before and after semicolons",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "after": Object {
              "type": "boolean",
            },
            "before": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "semi-style" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce location of semicolons",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "last",
            "first",
          ],
        },
      ],
    },
  },
  "sort-keys" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require object keys to be sorted",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "enum": Array [
            "asc",
            "desc",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "caseSensitive": Object {
              "type": "boolean",
            },
            "natural": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "sort-vars" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require variables within the same declaration block to be sorted",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "ignoreCase": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "space-before-blocks" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing before blocks",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "always",
                "never",
              ],
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "classes": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
                "functions": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
                "keywords": Object {
                  "enum": Array [
                    "always",
                    "never",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "space-before-function-paren" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing before \`function\` definition opening parenthesis",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "always",
                "never",
              ],
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "anonymous": Object {
                  "enum": Array [
                    "always",
                    "never",
                    "ignore",
                  ],
                },
                "asyncArrow": Object {
                  "enum": Array [
                    "always",
                    "never",
                    "ignore",
                  ],
                },
                "named": Object {
                  "enum": Array [
                    "always",
                    "never",
                    "ignore",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "space-in-parens" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing inside parentheses",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "exceptions": Object {
              "items": Object {
                "enum": Array [
                  "{}",
                  "[]",
                  "()",
                  "empty",
                ],
              },
              "type": "array",
              "uniqueItems": true,
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "space-infix-ops" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require spacing around infix operators",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "int32Hint": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "space-unary-ops" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing before or after unary operators",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "nonwords": Object {
              "type": "boolean",
            },
            "overrides": Object {
              "additionalProperties": Object {
                "type": "boolean",
              },
              "type": "object",
            },
            "words": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "spaced-comment" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce consistent spacing after the \`//\` or \`/*\` in a comment",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
        Object {
          "additionalProperties": false,
          "properties": Object {
            "block": Object {
              "additionalProperties": false,
              "properties": Object {
                "balanced": Object {
                  "type": "boolean",
                },
                "exceptions": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                },
                "markers": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
            "exceptions": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
            "line": Object {
              "additionalProperties": false,
              "properties": Object {
                "exceptions": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                },
                "markers": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
            "markers": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "switch-colon-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "enforce spacing around colons of switch statements",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "after": Object {
              "type": "boolean",
            },
            "before": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "template-tag-spacing" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow spacing between template tags and their literals",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
      ],
    },
  },
  "unicode-bom" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require or disallow Unicode byte order mark (BOM)",
        "recommended": false,
      },
      "fixable": "whitespace",
      "schema": Array [
        Object {
          "enum": Array [
            "always",
            "never",
          ],
        },
      ],
    },
  },
  "wrap-regex" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Stylistic Issues",
        "description": "require parenthesis around regex literals",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "init-declarations" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "require or disallow initialization in variable declarations",
        "recommended": false,
      },
      "schema": Object {
        "anyOf": Array [
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "always",
                ],
              },
            ],
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
          },
          Object {
            "items": Array [
              Object {
                "enum": Array [
                  "never",
                ],
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "ignoreForLoopInit": Object {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
          },
        ],
      },
    },
  },
  "no-catch-shadow" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "disallow \`catch\` clause parameters from shadowing variables in the outer scope",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-delete-var" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "disallow deleting variables",
        "recommended": true,
      },
      "schema": Array [],
    },
  },
  "no-label-var" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "disallow labels that share a name with a variable",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-restricted-globals" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "disallow specified global variables",
        "recommended": false,
      },
      "schema": Object {
        "items": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "message": Object {
                  "type": "string",
                },
                "name": Object {
                  "type": "string",
                },
              },
              "required": Array [
                "name",
              ],
              "type": "object",
            },
          ],
        },
        "minItems": 0,
        "type": "array",
        "uniqueItems": true,
      },
    },
  },
  "no-shadow" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "disallow variable declarations from shadowing variables declared in the outer scope",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "allow": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
            "builtinGlobals": Object {
              "type": "boolean",
            },
            "hoist": Object {
              "enum": Array [
                "all",
                "functions",
                "never",
              ],
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-shadow-restricted-names" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "disallow identifiers from shadowing restricted names",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-undef" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "disallow the use of undeclared variables unless mentioned in \`/*global */\` comments",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "typeof": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "no-undef-init" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "disallow initializing variables to \`undefined\`",
        "recommended": false,
      },
      "fixable": "code",
      "schema": Array [],
    },
  },
  "no-undefined" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "disallow the use of \`undefined\` as an identifier",
        "recommended": false,
      },
      "schema": Array [],
    },
  },
  "no-unused-vars" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "disallow unused variables",
        "recommended": true,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "all",
                "local",
              ],
            },
            Object {
              "properties": Object {
                "args": Object {
                  "enum": Array [
                    "all",
                    "after-used",
                    "none",
                  ],
                },
                "argsIgnorePattern": Object {
                  "type": "string",
                },
                "caughtErrors": Object {
                  "enum": Array [
                    "all",
                    "none",
                  ],
                },
                "caughtErrorsIgnorePattern": Object {
                  "type": "string",
                },
                "ignoreRestSiblings": Object {
                  "type": "boolean",
                },
                "vars": Object {
                  "enum": Array [
                    "all",
                    "local",
                  ],
                },
                "varsIgnorePattern": Object {
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
  "no-use-before-define" => Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "category": "Variables",
        "description": "disallow the use of variables before they are defined",
        "recommended": false,
      },
      "schema": Array [
        Object {
          "oneOf": Array [
            Object {
              "enum": Array [
                "nofunc",
              ],
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "classes": Object {
                  "type": "boolean",
                },
                "functions": Object {
                  "type": "boolean",
                },
                "variables": Object {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      ],
    },
  },
}
`;
